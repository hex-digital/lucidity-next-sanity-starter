const fs = require('fs');
const path = require('path');

function fileComment(filename) {
  return `/**
 * This file is generated. Do not modify this file.
 * It was generated at build time of the app, via pnpm dev or pnpm build.
 * It was generated by the file ${filename}.
 * It was last generated at ${new Date().toUTCString()}.
 */`;
}

/**
 * Generate import statements and export them.
 */
function getImportsAndExports(
  /** @type {string} */ path,
  /** @type {string} */ filePattern,
  /** @type {string} */ importId,
  /** @type {string} */ importAliasId,
  /** @type {string} */ exportConstName,
  /** @type {string} */ outputDirectory,
) {
  const files = readDirs(path, filePattern);

  const imports = files
    .map(
      (/** @type {string} */ file, index) =>
        `import { ${importId} as ${importAliasId}${index} } from '${getRelativeImportPath(file, outputDirectory)}';`,
    )
    .join('\n');

  const exports = `
export const ${exportConstName} = [${files.map((_, index) => `\n  { ${importId}: ${importAliasId}${index} }\n`).join(', ')}];
`;

  return {
    imports,
    exports,
  };
}

/**
 * Generate relative import path from the output path
 * @param {string} fullPath
 * @param {string} outputPath
 * @returns {string}
 */
function getRelativeImportPath(fullPath, outputPath) {
  const relativePath = path.relative(outputPath, fullPath);
  return './' + relativePath.replace(/\\/g, '/').replace(/\.ts$/, ''); // Normalize for Unix-like paths and remove .ts
}

/**
 * Function to recursively read directories based on a specified pattern.
 * @param {string} baseDir
 * @param {RegExp} pattern
 * @returns {*[]}
 */
function readDirs(baseDir, pattern) {
  /** @type {Array<string>} */
  let results = [];
  const entries = fs.readdirSync(baseDir, { withFileTypes: true });

  entries.forEach((entry) => {
    const fullPath = path.join(baseDir, entry.name);
    if (entry.isDirectory()) {
      results = results.concat(readDirs(fullPath, pattern));
    } else if (entry.isFile() && entry.name.match(pattern)) {
      results.push(fullPath);
    }
  });

  return results;
}

module.exports = {
  fileComment,
  getImportsAndExports,
};
